plugins {
    id "java"
    id "application"
}

repositories {
    maven {
        url "https://m2.dv8tion.net/releases"
        name "m2-dv8tion"
        content {
            includeGroup "net.dv8tion"
            includeGroup "com.sedmelluq"
        }
    }
    maven {
        url "https://jitpack.io"
        name "jitpack"
    }
    mavenCentral()
}

compileJava.options.encoding = "UTF-8"

sourceCompatibility = 17
targetCompatibility = 17

dependencies {
    implementation "com.google.guava:guava:31.0.1-jre"

    implementation "com.google.code.gson:gson:2.9.0"
    implementation "com.github.Marcono1234:gson-record-type-adapter-factory:v0.2.0"

    implementation "net.dv8tion:JDA:5.0.0-alpha.9"

    implementation "com.github.BlitzOffline:Pagination-Utils:master-SNAPSHOT"

    // EventWaiter
    implementation "com.github.JDA-Applications.JDA-Utilities:jda-utilities-commons:dfd5c6f599"

    implementation "com.sedmelluq:lavaplayer:1.3.78"

    implementation "com.sparkjava:spark-core:2.9.3"

    implementation "org.json:json:20211205"

    implementation "net.java.dev.jna:jna-platform:5.10.0"

    implementation "com.mashape.unirest:unirest-java:1.4.9"

    implementation "org.mongodb:mongo-java-driver:3.12.10"

    implementation "club.minnced:discord-webhooks:0.7.4"

    implementation "com.sedmelluq:lavaplayer:1.3.77"

    implementation "com.influxdb:influxdb-client-java:4.3.0"

    // Old version because i don't know how to migrate lol
    //noinspection GradlePackageUpdate
    implementation "se.michaelthelin.spotify:spotify-web-api-java:1.5.0"

    implementation "com.vdurmont:emoji-java:5.1.1"

    implementation "org.reflections:reflections:0.10.2"

    implementation "commons-validator:commons-validator:1.7"

    implementation "com.google.zxing:core:3.4.1"
    implementation "com.google.zxing:javase:3.4.1"

    implementation "ch.qos.logback:logback-classic:1.2.10"

    implementation "io.github.classgraph:classgraph:4.8.138"
}

mainClassName = "com.github.black0nion.blackonionbot.Main"

version = System.getenv("VERSION") ?: "dev"
processResources {
    def locAndFiles = getLoc()

    filesMatching("bot.metadata.json") {
        expand(
            version: version,
            lines_of_code: locAndFiles.get(0),
            files: locAndFiles.get(1)
        )
    }
}

jar {
    //noinspection GroovyAccessibility
    archiveVersion = ""
}

/**
 * This task downloads all dependencies (and their dependencies) and puts them into the libraries folder
 */
task downloadDependencies {
    doLast {
        logger.info("Cleaning up...")
        // delete superseded library jars
        List<String> newFiles = sourceSets.main.runtimeClasspath.getFiles().stream().map(File::getName).toList()
        for (File file : new File("libraries").listFiles()) {
            if (!file.getName().endsWith(".jar") || !newFiles.contains(file.getName())) {
                // why do i have to cast this to string? hello intellij? or gradle? or idk
                System.out.println((String) ("Deleting unnecessary file " + file.getName()))
                file.delete()
            }
        }
        logger.info("Copying dependencies")
        copy {
            from(sourceSets.main.runtimeClasspath) {
                include "*.jar"
            }
            into 'libraries/'
        }
        logger.info("Copied dependencies into libraries folder")
    }
}

def getLoc() {
    int linesOfCode = 0
    int filesCount = 0
    project.sourceSets.main.allSource.srcDirs.each { File dir ->
        if (dir.isDirectory()) {
            dir.eachFileRecurse { File file ->
                if (file.isFile()) {
                    file.eachLine(e -> linesOfCode++)
                    filesCount++
                }
            }
        }
    }
    return [linesOfCode, filesCount]
}