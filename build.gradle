// intellij + gradle + groovy = pain

//file:noinspection GroovyUnusedAssignment
//file:noinspection GrUnresolvedAccess
plugins {
	id "java"
	id "application"
	id "com.diffplug.spotless" version "6.3.0"
}

apply plugin: "java"
apply plugin: "com.diffplug.spotless"

repositories {
	maven {
		url "https://m2.dv8tion.net/releases"
		name "m2-dv8tion"
		content {
			includeGroup "net.dv8tion"
			includeGroup "com.sedmelluq"
		}
	}
	maven {
		url "https://jitpack.io"
		name "jitpack"
	}
	mavenCentral()
}

compileJava.options.encoding = "UTF-8"

sourceCompatibility = 17
targetCompatibility = 17

dependencies {
	implementation "com.google.guava:guava:31.1-jre"

	implementation "com.google.code.gson:gson:2.9.0"
	implementation "com.github.Marcono1234:gson-record-type-adapter-factory:v0.2.0"

	implementation "net.dv8tion:JDA:5.0.0-alpha.9"
	implementation "com.github.BlitzOffline:Pagination-Utils:master-SNAPSHOT"
	implementation "com.github.JDA-Applications.JDA-Utilities:jda-utilities-commons:dfd5c6f599"

	implementation "com.github.Mokulu:discord-oauth2-api:1.0.2"

	implementation "com.sedmelluq:lavaplayer:1.3.78"

	implementation "io.javalin:javalin:4.4.0"

	implementation "org.json:json:20220320"

	implementation "org.mongodb:mongo-java-driver:3.12.10"

	implementation "club.minnced:discord-webhooks:0.8.0"

	implementation "com.sedmelluq:lavaplayer:1.3.77"

	// Old version because i don't know how to migrate lol
	//noinspection GradlePackageUpdate
	implementation "se.michaelthelin.spotify:spotify-web-api-java:1.5.0"

	implementation "com.vdurmont:emoji-java:5.1.1"

	implementation "org.reflections:reflections:0.10.2"

	implementation "commons-validator:commons-validator:1.7"

	implementation "com.google.zxing:core:3.4.1"
	implementation "com.google.zxing:javase:3.4.1"

	implementation "ch.qos.logback:logback-classic:1.2.11"
	implementation "uk.org.lidalia:sysout-over-slf4j:1.0.2"

	implementation "io.github.classgraph:classgraph:4.8.141"

	implementation "io.prometheus:simpleclient:0.15.0"
	implementation "io.prometheus:simpleclient_hotspot:0.15.0"
	implementation "io.prometheus:simpleclient_httpserver:0.15.0"

	testImplementation "org.junit.jupiter:junit-jupiter:5.8.2"
	testImplementation "com.github.erosb:everit-json-schema:1.14.0"
}

compileJava {
		// Makes spotlessApply task run on every compile/build.
		dependsOn 'spotlessApply'

		// Nails the Java-Version of every Subproject
		sourceCompatibility = JavaVersion.VERSION_17
		targetCompatibility = JavaVersion.VERSION_17
}

spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// Use the default importOrder configuration
		removeUnusedImports()
		eclipse()
	}
}

test {
	useJUnitPlatform()
}

configurations.all {
	//noinspection GrUnresolvedAccess
	// ez vulnerability fix
	exclude group: "org.slf4j", module: "slf4j-log4j12"
}

mainClassName = "com.github.black0nion.blackonionbot.Main"

version = System.getenv("VERSION") ?: "dev"
processResources {
	def locAndFiles = getLoc()

	filesMatching("bot.metadata.json") {
		expand(
				version: version,
				lines_of_code: locAndFiles.get(0),
				files: locAndFiles.get(1)
		)
	}
}

jar {
	archiveVersion.set("")
}

/**
 * This task downloads all dependencies (with transitive dependencies) and puts them into the libraries folder.
 * Used instead of shadowJar to hopefully optimize build times.
 * Run the application jar with the downloaded library files in the classpath.
 */
task downloadDependencies {
	doLast {
		logger.info("Cleaning up...")
		// delete superseded library jars
		List<String> newFiles = sourceSets.main.runtimeClasspath.getFiles().stream().map(File::getName).toList()
		for (File file : new File("libraries").listFiles()) {
			if (!file.getName().endsWith(".jar") || !newFiles.contains(file.getName())) {
				// why do i have to cast this to string? hello intellij? or gradle? or idk
				System.out.println((String) ("Deleting unnecessary file " + file.getName()))
				file.delete()
			}
		}
		logger.info("Copying dependencies...")
		copy {
			from(sourceSets.main.runtimeClasspath) {
				include "*.jar"
			}
			into 'libraries/'
		}
		logger.info("Successfully copied dependencies into libraries folder!")
	}
}

def getLoc() {
	int linesOfCode = 0
	int filesCount = 0
	project.sourceSets.main.allSource.srcDirs.each { File dir ->
		if (dir.isDirectory()) {
			dir.eachFileRecurse { File file ->
				if (file.isFile()) {
					file.eachLine(e -> linesOfCode++)
					filesCount++
				}
			}
		}
	}
	return [linesOfCode, filesCount]
}
